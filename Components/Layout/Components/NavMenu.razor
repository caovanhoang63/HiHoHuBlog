@using HiHoHuBlog.Utils
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="navbar border-b-[1px]">
    <div class="flex-1">
        <a @onclick='() => { NavigationManager.NavigateTo("/"); }' class="btn btn-ghost  text-xl">Hihohu</a>
        <form @onsubmit="OnSubmitSearch">
            <label class="input input-bordered flex items-center gap-2 bg-white relative">
                <input type="text" class="grow "  placeholder="Search"
                       @bind="_searchQuery"
                       @onfocus="OpenDropdown"
                       @onblur="OnInputBlur"
                       
                />
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 16 16"
                    fill="currentColor"
                    class="h-4 w-4 opacity-70">
                    <path
                        fill-rule="evenodd"
                        d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z"
                        clip-rule="evenodd"/>
                </svg>
                <!-- Dropdown kết quả -->
                @if (_isDropdownOpen && _searchHistory.Count > 0)
                {
                <ul class="absolute top-full left-0 right-0 bg-white border border-gray-200 rounded shadow-lg mt-2 z-[999999]">
                    @foreach (var item in _searchHistory)
                    {
                    @if (item.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase))
                    {
                    <li class="flex items-center justify-between px-4 py-2 hover:bg-gray-100 cursor-pointer" @onclick='()=>NavigateToSearchItem(item)'>
                        <p class=" line-clamp-1 overflow-ellipsis">@item</p>
                        <!-- Nút X để xóa -->
                        <button
                            type="button"
                            class=" hover:text-gray-500 ml-2"
                            @onclick:stopPropagation
                            @onclick="async () => await RemoveItemAndKeepDropdown(item)">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </li>
                    }
                    }
                </ul>
                }

            </label>
        </form>
       
        
    </div>
    <div class="flex-none gap-2">
        
        <AuthorizeView Roles="admin, mod">
            <Authorized>
                <button @onclick="OnManage" class="btn btn-ghost sm">
            <span>
                Manage
            </span>
                    <div>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M20.25 14.15v4.25c0 1.094-.787 2.036-1.872 2.18-2.087.277-4.216.42-6.378.42s-4.291-.143-6.378-.42c-1.085-.144-1.872-1.086-1.872-2.18v-4.25m16.5 0a2.18 2.18 0 0 0 .75-1.661V8.706c0-1.081-.768-2.015-1.837-2.175a48.114 48.114 0 0 0-3.413-.387m4.5 8.006c-.194.165-.42.295-.673.38A23.978 23.978 0 0 1 12 15.75c-2.648 0-5.195-.429-7.577-1.22a2.016 2.016 0 0 1-.673-.38m0 0A2.18 2.18 0 0 1 3 12.489V8.706c0-1.081.768-2.015 1.837-2.175a48.111 48.111 0 0 1 3.413-.387m7.5 0V5.25A2.25 2.25 0 0 0 13.5 3h-3a2.25 2.25 0 0 0-2.25 2.25v.894m7.5 0a48.667 48.667 0 0 0-7.5 0M12 12.75h.008v.008H12v-.008Z" />
                        </svg>
                    </div>
                </button>
            </Authorized>
        </AuthorizeView>
        
        <button @onclick="OnWrite" class="btn btn-ghost sm">
            <span>
                Write
            </span>
            <div>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10"/>
                </svg>
            </div>
        </button>
        <AuthorizeView>
            <Authorized>
                <div class="dropdown dropdown-end">
                    <div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar">
                        <div class="w-10 rounded-full">
                            <img
                                alt="Tailwind CSS Navbar component"
                                src=" @(_requester?.GetAvatarUrl() is not null ? _requester?.GetAvatarUrl() : "")"/>
                        </div>
                    </div>
                    <ul
                        tabindex="0"
                        class="menu menu-sm dropdown-content bg-white rounded-box z-[1] mt-3 w-52 p-2 shadow">
                        <li>
                            <a href="/profile/@_requester.GetUsername()" class="justify-between">
                                Profile
                                <span class="">New</span>
                            </a>
                        </li>
                        <li>
                            <a href="/me/settings">Settings</a>
                        </li>
                        <li>
                            <a href="/logout">Logout</a>
                        </li>
                    </ul>
                </div>
            </Authorized>
            <NotAuthorized>
                <a href="/login">Login</a>
            </NotAuthorized>
        </AuthorizeView>

    </div>
</div>

@code {
    private string _searchQuery = string.Empty;
    private bool _isDropdownOpen = false;
    private List<string> _searchHistory = new();
    private bool _isRemovingItem = false;

    
    private IRequester _requester;
    [CascadingParameter] 
    Task<AuthenticationState> authenticationStateTask { get; set; }
    protected override async Task OnInitializedAsync()
    {
        _requester = await AuthUtils.GetInfo(authenticationStateTask); 
    }
    
    private async Task OnSubmitSearch()
    {
        if (!string.IsNullOrWhiteSpace(_searchQuery))
        {
            // Thêm query mới vào lịch sử tìm kiếm
            await AddToSearchHistory(_searchQuery);

            // Chuyển hướng tới trang tìm kiếm
            NavigationManager.NavigateTo($"/search?q={_searchQuery}");
        }
    }

    // Thêm một query mới vào lịch sử tìm kiếm
    private async Task AddToSearchHistory(string query)
    {
        // Lấy lịch sử hiện tại từ localStorage
        var json = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "searchHistory");
        var currentHistory = new List<string>();
        
        // Nếu có dữ liệu cũ, deserialize nó
        if (!string.IsNullOrEmpty(json))
        {
            currentHistory = System.Text.Json.JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>();
        }

        // Nếu query đã tồn tại, xóa nó từ vị trí cũ
        currentHistory.RemoveAll(x => x.Equals(query, StringComparison.OrdinalIgnoreCase));
        
        // Thêm query vào đầu danh sách
        currentHistory.Insert(0, query);
            
        // Giới hạn số lượng lịch sử (tùy chọn, ví dụ giữ 10 item)
        if (currentHistory.Count > 10)
        {
            currentHistory = currentHistory.Take(10).ToList();
        }

        // Cập nhật lại localStorage và state
        var newJson = System.Text.Json.JsonSerializer.Serialize(currentHistory);
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", "searchHistory", newJson);
        _searchHistory = currentHistory;
    }
    private void NavigateToSearchItem(string item)
    {
        NavigationManager.NavigateTo($"/search?q={item}");
    }

    private async Task OnWrite()
    {
        NavigationManager.NavigateTo("/new-blog");
    }
    private async Task OnManage()
    {
        NavigationManager.NavigateTo("admin/censor");
    }

    private async Task OpenDropdown()
    {
        _isDropdownOpen = true;
        await LoadSearchHistory();
    }

    private void CloseDropdown()
    {
        _isDropdownOpen = false;
    }
    private async Task OnInputBlur()
    {
        // Thêm delay nhỏ để đảm bảo RemoveItem được xử lý trước
        await Task.Delay(200);
        if (!_isRemovingItem)
        {
            CloseDropdown();
        }
    }
    private async Task RemoveItemAndKeepDropdown(string item)
    {
        _isRemovingItem = true;
        await RemoveItem(item);
        _isRemovingItem = false;
    }
    private async Task RemoveItem(string item)
    {
        // Lấy lịch sử hiện tại
        var json = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "searchHistory");
        var currentHistory = new List<string>();
        
        if (!string.IsNullOrEmpty(json))
        {
            currentHistory = System.Text.Json.JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>();
        }

        // Xóa item
        currentHistory.RemoveAll(x => x.Equals(item, StringComparison.OrdinalIgnoreCase));
        
        // Cập nhật lại localStorage và state
        var newJson = System.Text.Json.JsonSerializer.Serialize(currentHistory);
        await JsRuntime.InvokeAsync<string>("localStorage.setItem", "searchHistory", newJson);
        _searchHistory = currentHistory;
    }

    private async Task LoadSearchHistory()
    {
        var json = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "searchHistory");
        if (!string.IsNullOrEmpty(json))
        {
            _searchHistory = System.Text.Json.JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>();
        }
    }
}
