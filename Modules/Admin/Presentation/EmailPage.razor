@page "/admin/email"
@using HiHoHuBlog.Components.Layout
@using HiHoHuBlog.Modules.Email.Entity
@using HiHoHuBlog.Modules.Email.Service
@using HiHoHuBlog.Utils
@using HiHoHuBlog.Components.Components
@inject IEmailService EmailService
@inject IToastService ToastService

@layout AdminLayout

@attribute [Authorize]

<AuthorizeView Roles="admin, mod">
    <Authorized>
        <FullScreenSpinner/>
        <dialog id="create_modal" class="modal">
            <div class="modal-box">
                <h3 class="text-lg font-bold py-4">Create template</h3>
                <label class="label-text  py-2">Template name:</label>
                <input @bind="_newName" type="text" placeholder="TEMPLATE_NAME" class="input input-sm input-bordered w-full "/>
                <label class="label-text py-2">Template content:</label>
                <textarea @bind="_newContent" class="textarea textarea-md textarea-bordered w-full" placeholder="Html Content"></textarea>
                <div class="modal-action">
                    <button @onclick="OnCreate" class="btn btn-warning">Create</button>
                    <form method="dialog">
                        <!-- if there is a button, it will close the modal -->
                        <button @onclick='() => { _newName = ""; _newContent = ""; } ' class="btn">Close</button>
                    </form>
                </div>
            </div>
        </dialog>

        <dialog id="update_modal" class="modal">
            <div class="modal-box">
                <h3 class="text-lg font-bold py-4">Update template</h3>
                <label class="label-text  py-2">Template name:</label>
                <input @bind="_newName" type="text" placeholder="TEMPLATE_NAME" class="input input-sm input-bordered w-full "/>
                <label class="label-text py-2">Template content:</label>
                <textarea @bind="_newContent" class="textarea textarea-md textarea-bordered w-full" placeholder="Html Content"></textarea>
                <div class="modal-action">
                    <button @onclick="OnUpdate" class="btn btn-warning">Update</button>
                    <form method="dialog">
                        <!-- if there is a button, it will close the modal -->
                        <button @onclick='() => { _newName = ""; _newContent = ""; } ' class="btn">Close</button>
                    </form>
                </div>
            </div>
        </dialog>
        <div class="flex flex-col h-full overflow-y-hidden p-5">
            @* content *@
            <div class="flex flex-col max-h-full">
                @* Search bar *@
                <div class="flex mb-5 flex-row-reverse align-middle space-x-5">
                    <div>
                        <label class="input w-80 ml-5 input-bordered input-sm flex items-center gap-2 bg-white">
                            <input type="text" class="grow " placeholder="Search"/>
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 16 16"
                                fill="currentColor"
                                class="h-3 w-3 opacity-70">
                                <path
                                    fill-rule="evenodd"
                                    d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z"
                                    clip-rule="evenodd"/>
                            </svg>
                        </label>
                    </div>

                    <button class="btn btn-sm btn-warning" onclick="create_modal.showModal()">New Template</button>

                    @* <div class="flex w-full"> *@
                    @*     <label class="label cursor-pointer space-x-2"> *@
                    @*         <input @onclick="() => OnCheck(1)" type="checkbox"  checked='@(_filter?.Status?.Contains(1))'  class="checkbox checkbox-sm"/> *@
                    @*         <span class="label-text text-success">Active</span> *@
                    @*     </label> *@
                    @*     <label class="label cursor-pointer space-x-2"> *@
                    @*         <input  @onclick="() => OnCheck(0)"  type="checkbox" checked='@(_filter?.Status?.Contains(0))'  class="checkbox checkbox-sm"/> *@
                    @*         <span class="label-text text-error">Deleted</span> *@
                    @*     </label> *@
                    @* </div> *@

                </div>
                @* Table *@
                <div class="overflow-y-scroll h-96">
                    <table class="table table-xs text-center ">
                        <thead class="sticky top-0 z-50 bg-white">
                        <tr class="font-bold">
                            <th>Id</th>
                            <th>Name</th>
                            <th>Content</th>
                            <th>Last Modified</th>
                            <th>Created At</th>
                            <th>Status</th>
                            <th></th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody class="">
                        @foreach (var template in _emails)
                        {
                            <tr class="hover:bg-base-200 hover:cursor-pointer">
                                <th>@template.Id</th>
                                <td>@template.Name</td>
                                <td class="line-clamp-2">@template.Content</td>
                                <td>@template.UpdatedAt</td>
                                <td>@template.CreatedAt</td>
                                <td class="w-20">
                                    @switch (template.Status)
                                    {
                                        case 0:
                                            <span class="text-error">Deleted</span>
                                            break;
                                        case 1:
                                            <span class="text-success">Active</span>
                                            break;
                                        case 2:
                                            <span class="text-warning">Banned</span>
                                            break;
                                        default:
                                            <span class="text-warning">Unknown</span>
                                            break;
                                    }
                                </td>
                                <td class="w-20 relative">
                                    <div @onclick:stopPropagation="true" class="dropdown dropdown-hover dropdown-bottom dropdown-end">
                                        <a tabindex="0" role="button">
                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                 fill="none" viewBox="0 0 24 24"
                                                 stroke-width="1.5"
                                                 stroke="currentColor"
                                                 class="size-5">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 12.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 18.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5Z"/>
                                            </svg>
                                        </a>
                                        <ul tabindex="0" class="absolute dropdown-content menu bg-base-100 rounded-box z-50 w-40 p-2 shadow">
                                            @if (template.Status != (int)Status.Active)
                                            {
                                                <li @onclick="() => OnClickReactive(template)" class="text-success">
                                                    <a>ReActive</a>
                                                </li>
                                            }
                                            <li @onclick="() => OnClickUpdate(template)" class="text-warning">
                                                <a>Update</a>
                                            </li>
                                            <li @onclick="() => OnClickDelete(template)" class="text-error">
                                                <a>Delete</a>
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
                @* Paging *@
                <div  class="w-full flex justify-end">
                    <Pagination Paging="_paging" FetchDataAsync="GetEmails"></Pagination>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    private readonly Paging _paging = new Paging(1,20);
    private readonly List<EmailTemplate> _emails = new List<EmailTemplate>();
    private readonly string _searchArg = "";
    private  bool _isLoading = false;
    private IRequester _requester;
    private string _newName = "";
    private string _newContent = "";
    private EmailTemplate? _selectedTemplate = null;
    
    protected override async Task OnInitializedAsync()
    {
        _requester = await AuthUtils.GetInfo(AuthenticationStateTask);
        
        await GetEmails();
    }

    private async Task GetEmails()
    {
        _isLoading = true;
        await InvokeAsync(StateHasChanged);
        var r = await EmailService.FindMany( _requester!,_searchArg,_paging);

        if (r.IsOk) _emails.AddRange(r.Value.ToList());
        else ToastService.ShowError(r.Error.Message);
        
        _isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
    
    private async void OnPrev()
    {
        if ( _paging.Page == 1 ) return;
        _paging.Page--;
        await GetEmails();
    }

    private async void OnNext()
    {
        if ( _paging.IsLastPage()) return;
        _paging.Page++;
        await GetEmails();
    }

    private async Task OnClickReactive(EmailTemplate email)
    {
        throw new NotImplementedException();
    }

    private async Task OnClickDelete(EmailTemplate email)
    {
        throw new NotImplementedException();
    }

    private async Task OnCreate()
    {
        var r = await EmailService.Create(_requester!, new EmailTemplateCreate()
        {
            Name = _newName,
            Content = _newContent
        });
        
        if (r.IsOk)
        {
            await JSRuntime.InvokeVoidAsync("closeModal", "create_modal");
            ToastService.ShowSuccess("Create success");
        }
        else
        {
            Console.WriteLine(r.Error);
            ToastService.ShowError(r.Error.Message);
        }
        
    }

    private async Task OnClickUpdate(EmailTemplate template)
    {
        _selectedTemplate = template;
        await JSRuntime.InvokeVoidAsync("openModal", "update_modal");
        _newContent = template.Content;
        _newName = template.Name;
    }

    private async Task OnUpdate()
    {
        if (_selectedTemplate is null) return;
        var r = await EmailService.Update(_requester!, _selectedTemplate.Name, new EmailTemplateUpdate()
        {
            Name = _newName,
            Content = _newContent
        });
        
        if (r.IsOk)
        {
            await JSRuntime.InvokeVoidAsync("closeModal", "update_modal");
            ToastService.ShowSuccess("Update success");
        }
        else
        {
            Console.WriteLine(r.Error);
            ToastService.ShowError(r.Error.Message);
        }
        await InvokeAsync(StateHasChanged);
    }

}

<script>
    function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.close();
        }
    }
    function openModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.showModal();
        }
    }
</script>