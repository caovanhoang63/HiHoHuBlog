@page "/censor"
@using HiHoHuBlog.Components.Layout
@using HiHoHuBlog.Modules.Blog.Entity
@using HiHoHuBlog.Modules.Blog.Service.Interface
@using HiHoHuBlog.Utils
@using HiHoHuBlog.Modules.Admin.Presentation.Components
@layout AdminLayout
@inject IBlogGetService BlogGetService
@inject IToastService ToastService
@rendermode InteractiveServer

<div>
    <BlogModal @ref="blogModal" Close="Close" Open="IsOpenDetailModal" Blog="Blog"></BlogModal>
    <div class="overflow-x-auto">
        <table class="table table-xs text-center">
            <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Author</th>
                <th>Last Modified</th>
                <th>Created At</th>
                <th>Is Publish</th>
                <th>Publish At</th>
            </tr>
            </thead>
            <tbody>
            @if (BlogList is not null)
            {
                @foreach (var blog in BlogList)
                {
                    <tr class="hover:bg-base-200" @onclick="async () => await OnRowClick(blog.Id)">
                        <th>@blog.Id</th>
                        <td>@blog.Title</td>
                        <td>Hoang</td>
                        <td>@blog.UpdatedAt</td>
                        <td>@blog.CreatedAt</td>
                        <td>
                            <label>
                                <input checked="@blog.IsPublished" type="checkbox" class="checkbox checkbox-md"/>
                            </label>
                        </td>
                        <td>@blog.PublishedAt</td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter] public IEnumerable<BlogList>? BlogList { get; set; } = null;
    [Parameter] public BlogDetail? Blog { get; set; }
    [Parameter] public bool IsOpenDetailModal { get; set; } = false;
    
    private BlogModal? blogModal;

    private void Close()
    {
        IsOpenDetailModal = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var r = await BlogGetService.GetBlogs(null, new Paging());
        if (!r.IsOk)
        {
            return;
        }
        BlogList = r.Value;

    }

    private async Task OnRowClick(int id)
    {
        try
        {
            Console.WriteLine(123);
            var r = await BlogGetService.GetBlog(id);
        
            if (!r.IsOk)
            {
                return;
            }
        
            if (r.Value != null || blogModal is not  null)
            {
                Console.WriteLine(r.Value.Id);
                
                Blog = r.Value;
                await InvokeAsync(StateHasChanged); 

                IsOpenDetailModal = true;
            }
            else
            {
                ToastService.ShowError("Not found");
            }
        }catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            if (blogModal is null)
            {
                Console.WriteLine(124);
            }
        }

        
    }
}

