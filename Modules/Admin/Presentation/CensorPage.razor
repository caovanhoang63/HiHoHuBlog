@page "/censor"
@using HiHoHuBlog.Components.Layout
@using HiHoHuBlog.Modules.Blog.Entity
@using HiHoHuBlog.Modules.Blog.Service.Interface
@using HiHoHuBlog.Utils
@using HiHoHuBlog.Modules.Admin.Presentation.Components
@layout AdminLayout
@inject IBlogGetService BlogGetService
@inject IToastService ToastService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<div class="h-full  ">
    <BlogModal @ref="blogModal" Close="Close" Open="IsOpenDetailModal" Blog="Blog"></BlogModal>
    <div class="flex mb-5 flex-row-reverse align-middle space-x-5">
        <div>
            <label class="input w-80 ml-5 input-bordered flex items-center gap-2 bg-white">
                <input type="text" class="grow" placeholder="Search"/>
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 16 16"
                    fill="currentColor"
                    class="h-4 w-4 opacity-70">
                    <path
                        fill-rule="evenodd"
                        d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z"
                        clip-rule="evenodd"/>
                </svg>
            </label>    
        </div>

        <div tabindex="0" role="button" class="btn ">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z"/>
            </svg>

        </div>
        <div tabindex="0" role="button" class="btn">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5M12 17.25h8.25"/>
            </svg>
        </div>
    </div>
    <div class="overflow-x-auto  h-full flex flex-col">
        <table class="table table-xs text-center">
            <thead >
            <tr class="font-bold">
                <th>Id</th>
                <th>Title</th>
                <th>Author</th>
                <th>Last Modified</th>
                <th >Created At</th>
                <th>Publish At</th>
                <th >Is Publish</th>
                
                <th>Status</th>
                <th></th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @if (BlogList is not null)
            {
                @foreach (var blog in BlogList)
                {
                    <tr class="hover:bg-base-200 hover:cursor-pointer" @onclick="async () => await OnRowClick(blog.Id)">
                        <th>@blog.Id</th>
                        <td>
                            @blog.Title
                        </td>
                        <td>Hoang</td>
                        <td class="w-36">@blog.UpdatedAt</td>
                        <td class="w-36">@blog.CreatedAt</td>
                        <td class="w-36">@blog.PublishedAt</td>
                        <td class="w-16">
                            <label>
                                <input checked="@blog.IsPublished" type="checkbox" class="checkbox checkbox-md"/>
                            </label>
                        </td>
                        <td class="w-20">
                            @switch (@blog.Status)
                            {
                                case 0:
                                    <span class="text-error">Deleted</span>
                                    break;
                                case 1:
                                    <span class="text-success">Active</span>
                                    break;
                                case 2:
                                    <span class="text-warning">Banned</span>
                                    break;
                                default:
                                    <span class="text-warning">Unknown</span>
                                    break;
                            }
                        </td>
                        <td class="w-10">
                            <a @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick='e => NavigationManager.NavigateTo($"blog/{blog.Id}")'>
                                <svg xmlns="http://www.w3.org/2000/svg"
                                     fill="none"
                                     viewBox="0 0 24 24"
                                     stroke-width="1.5"
                                     stroke="currentColor"
                                     class="size-5 text-blue-500">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"/>
                                </svg>
                            </a>
                        </td>
                        <td class="w-20 relative">
                            <div class="dropdown dropdown-hover dropdown-bottom dropdown-end">
                                <div tabindex="0" role="button" class="btn m-1">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 12.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 18.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5Z"/>
                                    </svg>
                                </div>
                                <ul tabindex="0" class="absolute dropdown-content menu bg-base-100 rounded-box z-[1] w-40 p-2 shadow">
                                    <li class="text-warning"><a>Warn</a></li>
                                    <li class="text-error"><a>Delete</a></li>
                                    <li class="text-warning-content"><a>Block</a></li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
        <div class="join mt-10 place-self-end">
            <button class="join-item btn">1</button>
            <button class="join-item btn">2</button>
            <button class="join-item btn btn-disabled">...</button>
            <button class="join-item btn">99</button>
            <button class="join-item btn">100</button>
        </div>
    </div>
    
</div>

@code {
    [Parameter] public IEnumerable<BlogList>? BlogList { get; set; } = null;
    [Parameter] public BlogDetail? Blog { get; set; }
    [Parameter] public bool IsOpenDetailModal { get; set; } = false;
    [Parameter] public Paging Paging { get; set; } = new Paging(0,0,20,0);
    private BlogModal? blogModal;

    private void Close()
    {
        IsOpenDetailModal = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var r = await BlogGetService.GetBlogs(null, Paging);
        if (!r.IsOk)
        {
            return;
        }
        BlogList = r.Value;
    }

    private async Task OnRowClick(int id)
    {
        try
        {
            Console.WriteLine(123);
            var r = await BlogGetService.GetBlog(id);
        
            if (!r.IsOk)
            {
                return;
            }
        
            if (r.Value != null || blogModal is not  null)
            {
                Console.WriteLine(r.Value.Id);
                
                Blog = r.Value;
                await InvokeAsync(StateHasChanged); 

                IsOpenDetailModal = true;
            }
            else
            {
                ToastService.ShowError("Not found");
            }
        }catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            if (blogModal is null)
            {
                Console.WriteLine(124);
            }
        }
    }



}

