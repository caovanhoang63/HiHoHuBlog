@page "/tags"
@using HiHoHuBlog.Components.Layout
@using HiHoHuBlog.Modules.Admin.Entity
@using HiHoHuBlog.Modules.Admin.Service.Interface
@using HiHoHuBlog.Modules.Tag.Entity
@using HiHoHuBlog.Modules.Tag.Service.Interface
@using HiHoHuBlog.Utils
@using HiHoHuBlog.Components.Components
@layout AdminLayout
@attribute [Authorize(Roles="admin, mod")]
@inject ITagService TagService
@inject IToastService toastService
@inject NavigationManager NavigationManager
@attribute [Authorize]
<AuthorizeView Roles="admin, mod">
    <Authorized>
        <FullScreenSpinner IsLoading="_isLoading"></FullScreenSpinner>
        <!-- You can open the modal using ID.showModal() method -->
        <dialog id="create_modal" class="modal">
            <div class="modal-box">
                <h3 class="text-lg font-bold py-4">New Tag</h3>
                <input @bind="_newTagName" type="text" placeholder="Tag name" class="input input-bordered w-full "/>
                <div class="modal-action">
                    <button @onclick="OnCreate" class="btn btn-warning">Create</button>
                    <form method="dialog">
                        <!-- if there is a button, it will close the modal -->
                        <button @onclick='() => _newTagName = ""' class="btn">Close</button>
                    </form>
                </div>
            </div>
        </dialog>
        <dialog id="delete_modal" class="modal">
            <div class="modal-box">
                <h3 class="text-lg font-bold py-4">Delete Tag</h3>
                <p>Are you sure you want to delete tag "@_selectedTag?.Name"</p>
                <div class="modal-action">
                    <button @onclick="OnDelete" class="btn btn-warning">Delete</button>
                    <form method="dialog">
                        <!-- if there is a button, it will close the modal -->
                        <button class="btn">Close</button>
                    </form>
                </div>
            </div>
        </dialog>
        <dialog id="reactive_modal" class="modal">
            <div class="modal-box">
                <h3 class="text-lg font-bold py-4"></h3>
                <div class="modal-action">
                    <button @onclick="OnCreate" class="btn btn-warning">Create</button>
                    <form method="dialog">
                        <button class="btn">Close</button>
                    </form>
                </div>
            </div>
        </dialog>
        
        <div class="flex flex-col h-full overflow-y-hidden p-5">
            @* content *@
            <div class="flex flex-col max-h-full">
                @* Search bar *@
                <div class="flex mb-5 flex-row-reverse align-middle space-x-5">
                    <div>
                        <label class="input w-80 ml-5 input-bordered input-sm flex items-center gap-2 bg-white">
                            <input type="text" class="grow " placeholder="Search"/>
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 16 16"
                                fill="currentColor"
                                class="h-3 w-3 opacity-70">
                                <path
                                    fill-rule="evenodd"
                                    d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z"
                                    clip-rule="evenodd"/>
                            </svg>
                        </label>
                    </div>
                    <div tabindex="0" role="button" class="btn btn-sm">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5M12 17.25h8.25"/>
                        </svg>
                    </div>
                    <button class="btn btn-sm btn-warning" onclick="create_modal.showModal()">New Tag</button>
                    
                    <div class="flex w-full">
                        <label class="label cursor-pointer space-x-2">
                            <input @onclick="() => OnCheck(1)" type="checkbox"  checked='@(_filter?.Status?.Contains(1))'  class="checkbox checkbox-sm"/>
                            <span class="label-text text-success">Active</span>
                        </label>
                        <label class="label cursor-pointer space-x-2">
                            <input  @onclick="() => OnCheck(0)"  type="checkbox" checked='@(_filter?.Status?.Contains(0))'  class="checkbox checkbox-sm"/>
                            <span class="label-text text-error">Deleted</span>
                        </label>
                    </div>
                    
                </div>
                @* Table *@
                <div class="overflow-y-scroll">
                    <table class="table table-xs text-center">
                        <thead class="sticky top-0 z-50 bg-white">
                        <tr class="font-bold">
                            <th>Id</th>
                            <th>Name</th>
                            <th>Total Blog</th>
                            <th>Last Modified</th>
                            <th>Created At</th>
                            <th>Status</th>
                            <th></th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody class="">
                        @if (_tags is not null)
                        {
                            @foreach (var tag in _tags)
                            {
                                if (_filter.Status.Contains(tag.Status))
                                {
                                    <tr>
                                    <th>@tag.Id</th>
                                    <td>@tag.Name</td>
                                    <td>@tag.TotalBlog</td>
                                    <td>@tag.UpdatedAt</td>
                                    <td>@tag.CreatedAt</td>
                                    <td class="w-20">
                                        @switch (tag.Status)
                                        {
                                            case 0:
                                                <span class="text-error">Deleted</span>
                                                break;
                                            case 1:
                                                <span class="text-success">Active</span>
                                                break;
                                            case 2:
                                                <span class="text-warning">Banned</span>
                                                break;
                                            default:
                                                <span class="text-warning">Unknown</span>
                                                break;
                                        }
                                    </td>
                                    <td class="w-20 relative">
                                        <div @onclick:stopPropagation="true" class="dropdown dropdown-hover dropdown-bottom dropdown-end">
                                            <a tabindex="0" role="button">
                                                <svg xmlns="http://www.w3.org/2000/svg"
                                                     fill="none" viewBox="0 0 24 24"
                                                     stroke-width="1.5"
                                                     stroke="currentColor"
                                                     class="size-5">
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 12.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 18.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5Z"/>
                                                </svg>
                                            </a>
                                            <ul tabindex="0" class="absolute dropdown-content menu bg-base-100 rounded-box z-50 w-40 p-2 shadow">
                                                @if (tag.Status != (int)Status.Active)
                                                {
                                                    <li @onclick="() => OnClickReactive(tag)" class="text-success">
                                                        <a>ReActive</a>
                                                    </li>
                                                }
                                                <li  @onclick="() => OnClickDelete(tag)" class="text-error">
                                                    <a>Delete</a>
                                                </li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                                }
                            }
                        }
                        </tbody>
                    </table>
                </div>
                @* Paging *@
                <div  class="w-full flex justify-end">
                    <Pagination Paging="_paging" FetchDataAsync="GetTags"></Pagination>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public string Reason { get; set; } = "";
    private IRequester? _requester = null;
    private IEnumerable<Tag>? _tags;
    private readonly Paging _paging = new Paging(1,20);
    private string _newTagName = "";
    private bool _isLoading = false;
    private Tag? _selectedTag = null;
    private readonly TagFilter _filter = new TagFilter
    {
        Status = new int[]
        {
            1
        }
    };

    private async void OnClickReactive(Tag tag)
    {
        _selectedTag = tag;
    }
    private async void OnClickDelete(Tag tag)
    {
        _selectedTag = tag;
        await JSRuntime.InvokeVoidAsync("openModal", "delete_modal");

    }
    
    private async void OnCheck(int status)
    {
        if (_filter.Status!.Contains(status))
        {
            _filter.Status = _filter.Status!.Where(val => val != status).ToArray();
        }
        else
        {
            _filter.Status =  _filter.Status!.Append(status).ToArray();
        }
        await GetTags();
    }
    
    private async void OnPrev()
    {
        if ( _paging.Page == 1 ) return;
        _paging.Page--;
        await GetTags();
    }

    private async void OnNext()
    {
        if ( _paging.IsLastPage()) return;
        _paging.Page++;
        await GetTags();
    }

    private async void OnCreate()
    {
        var create = new TagCreate() { Name = _newTagName };
        var r = await TagService.Create(_requester!, create);
        if (r.IsOk)
        {
            toastService.ShowSuccess("Create success");
            
            await JSRuntime.InvokeVoidAsync("closeModal", "create_modal");
            _tags = _tags!.Prepend(new Tag
            {
                Id = create.Id,
                Name = create.Name,
                TotalBlog = 0,
                Status = 1,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            });
        }
        _newTagName = "";
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetTags()
    {
        _isLoading = true;
        var r  = await TagService.List(_requester!,_filter,_paging);

        if (!r.IsOk)
        {
            toastService.ShowError(r.Error.Message);
        }
        else
        {
            _tags = r.Value;
        }

        _isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (AuthenticationStateTask is null)
        {
            NavigationManager.NavigateTo("/error");
            return;
        }
        _requester = await AuthUtils.GetInfo(AuthenticationStateTask);
        await GetTags();
    }

    private async Task OnDelete()
    {
        if (_selectedTag is null)
        {
            toastService.ShowError("Tag not exist");
        }
        else
        {
            var result = await TagService.Delete(_requester!, _selectedTag.Id);
            if (!result.IsOk)
            {
                toastService.ShowError(result.Error.Message);
            }
            else
            {
                toastService.ShowSuccess("Delete success");
                _selectedTag.Status = 0;
            }
        }

        _selectedTag = null;
        await JSRuntime.InvokeVoidAsync("closeModal", "delete_modal");
        await InvokeAsync(StateHasChanged);
    }

}

<script>
    function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.close();
        }
    }
    function openModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.showModal();
        }
    }
</script>