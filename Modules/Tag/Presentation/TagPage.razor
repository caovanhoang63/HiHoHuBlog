@page "/tag"
@using HiHoHuBlog.Components.Components
@using HiHoHuBlog.Modules.Blog.Entity
@using HiHoHuBlog.Modules.Search.Entity
@using HiHoHuBlog.Modules.Search.Service.Interface
@using HiHoHuBlog.Utils
@using HiHoHuBlog.Modules.Blog.Presentation.Components
@inject ISearchBlogService BlogSearch

<Container ContainerClass="flex justify-between space-x-10 max-w-7xl">
    <div class="grow max-w-4xl py-10">
        <div class="text-3xl font-bold ">
            <span class="text-gray-400">Result for </span>
            <span>@TagId</span>
        </div>
        <div  class="tabs tabs-bordered">
            <div>
                @foreach (var blog in _blogs)
                {
                    <BlogCard BlogSearchDoc="@blog"/>
                }
                @* Paging *@
                <div class="join mt-5 flex justify-center">
                    <button @onclick="OnPrevious" class="join-item btn btn-ghost btn-sm" disabled="@(Paging.Page == 1)">«</button>

                    @for (int i = 1; i <= Paging.TotalPages; i++)
                    {
                        if (ShouldDisplayPage(i))
                        {
                            var i1 = i;
                            <button @onclick="() => OnPageClick(i1)"
                                    class="join-item btn btn-sm @(Paging.Page == i ? "btn-active" : "btn-ghost")">
                                @i
                            </button>
                        }
                        else if (i == 2 || i == Paging.TotalPages - 1)
                        {
                            <button class="join-item btn btn-ghost btn-sm btn-disabled">...</button>
                        }
                    }

                    <button @onclick="OnNext" class="join-item btn btn-ghost btn-sm" disabled="@(Paging.Page == Paging.TotalPages)">»</button>
                </div>
            </div>
        </div>
    </div>
</Container>
@code {
    [SupplyParameterFromQuery(Name = "t")] int? TagId { get; set; }
    private List<BlogSearchDoc> _blogs = new List<BlogSearchDoc>();

    private int _seed = 0;
    private readonly Paging Paging = new Paging(1, 5);
    private BlogFilter? _filter;

    protected override async Task OnInitializedAsync()
    {
        _seed = Guid.NewGuid().GetHashCode();
        _filter = new BlogFilter { 
            TagId = TagId,
        };
        var r = await BlogSearch.RandomBlog(_seed, Paging, _filter);
        if (!r.IsOk)
        {
            Console.WriteLine(r.Error);
        }
        if (r is { IsOk: true, Value: not null })
        {
            _blogs.AddRange(r.Value.ToList());
        }
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task GetBlogs()
    {
        _seed = Guid.NewGuid().GetHashCode();
        _filter = new BlogFilter { TagId = TagId };
        var r = await BlogSearch.RandomBlog(_seed, Paging, _filter);
        if (r is { IsOk: true, Value: not null })
        {
            _blogs = r.Value.ToList();
        }
    }
    private bool ShouldDisplayPage(int page)
    {
        // Hiển thị trang đầu, cuối, trang hiện tại, và các trang xung quanh
        return page == 1 || page == Paging.TotalPages || 
               Math.Abs(page - Paging.Page) <= 2;
    }

    private async void OnPageClick(int page)
    {
        if (page != Paging.Page)
        {
            Paging.Page = page;
            await GetBlogs();
        }
        StateHasChanged();

    }

    private async void OnPrevious()
    {
        if (Paging.Page > 1)
        {
            Paging.Page--;
            await GetBlogs();
        }
    }

    private async void OnNext()
    {
        if (Paging.Page < Paging.TotalPages)
        {
            Paging.Page++;
            await GetBlogs();
        }
    }

}