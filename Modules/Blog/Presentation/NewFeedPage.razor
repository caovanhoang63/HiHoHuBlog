@page "/"
@using HiHoHuBlog.Components.Components
@using HiHoHuBlog.Modules.Blog.Entity
@using HiHoHuBlog.Modules.Blog.Presentation.Components
@using HiHoHuBlog.Modules.Search.Entity
@using HiHoHuBlog.Modules.Search.Service.Interface
@using HiHoHuBlog.Utils
@using HiHoHuBlog.Modules.Search.Presentation.Components
@inject ISearchBlogService BlogSearch
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject ISearchTagService TagService
@inject NavigationManager NavigationManager

@attribute [Authorize]
@attribute [AllowAnonymous]
<HeadContent>
    <style>
        body {
            overflow-y: scroll;
        }
    </style>
</HeadContent>


<Container ContainerClass="flex justify-between space-x-10 max-w-7xl relative">
    <div class="grow max-w-4xl pb-10">
        @*<div role="tablist" class="tabs tabs-bordered">
            <button class="tab">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15"/>
                </svg>
            </button>
            <a role="tab" class="tab">Tab 1</a>
            <a role="tab" class="tab tab-active">Tab 2</a>
            <a role="tab" class="tab">Tab 3</a>
            <a role="tab" class="tab">Tab 4</a>
        </div>*@
        <ul >
            @foreach (var blog in _blogs)
            {
                <li class="list-none">
                    <BlogCard BlogSearchDoc="blog"/>
                </li>
            }
        </ul>
        <div class="text-center w-full">
            <p class="@(_isLoading ? " " : "hidden" )">Loading...</p>
        </div>
    </div>
    <div class="border-l-[1px]  p-10 max-w-sm max-h-screen sticky top-0">
        <div class="flex flex-col space-y-2">
            <span class="text-gray-600 mb-6">Recommended Topics</span>
            <div class="flex flex-wrap ">
                @foreach (var tag in _recommendedTags)
                {
                    <div class="bg-gray-200 rounded-full px-4 py-2 mr-2 mb-2 cursor-pointer"
                         @onclick='() => NavigationManager.NavigateTo($"/tag?t={tag.Id}")'>@tag.Name</div>
                }
            </div>
            <div class="divider mt-9 mb-0"></div>
            <span class="text-gray-600 mb-6">Who to follow</span>
            <div >
                <MatchingPeopleSmallCard></MatchingPeopleSmallCard>
                <MatchingPeopleSmallCard></MatchingPeopleSmallCard>
            </div>

        </div>
    </div>
</Container>

@code {
    private IRequester? _requester;
    private readonly List<BlogSearchDoc> _blogs = new List<BlogSearchDoc>();
    private bool _isLoading = false;
    private readonly Paging _paging = new Paging(1, 4);
    private int _seed = 0;
    private readonly List<TagSearchDoc> _recommendedTags = new List<TagSearchDoc>();
    
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _requester = await AuthUtils.GetInfo(authenticationStateTask);
        _seed = Guid.NewGuid().GetHashCode();
        
        var r = _requester is null ? 
            await BlogSearch.RandomBlog(_seed, _paging): 
            await BlogSearch.RecommendSearchBlogByUser(_requester, _seed, _paging);

        if (r is { IsOk: true, Value: not null })
        {
            _blogs.AddRange(r.Value.ToList());
        }
        else
        {
            ToastService.ShowError(r.Error.Message);
        }

        var tR = await TagService.RandomSearchTags(_seed, new Paging(1,5));
        if (tR.IsOk)
        {
            _recommendedTags.AddRange(tR.Value.ToList());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            await LoadMoreBlogs(); 
            await LoadMoreBlogs();
            await JSRuntime.InvokeVoidAsync("addScrollListener", DotNetObjectReference.Create(this));
            await JSRuntime.InvokeVoidAsync("addVisibilityListener", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task LoadMoreBlogs()
    {
        if (_paging.IsLastPage()) return;
        if (_isLoading)
            return;
        _isLoading = true;
        await InvokeAsync(StateHasChanged);
        _paging.Page++;
        var r = _requester is null ? 
            await BlogSearch.RandomBlog(_seed, _paging) : 
            await BlogSearch.RecommendSearchBlogByUser(_requester, _seed, _paging);
        if (r is { IsOk: true, Value: not null })
        {
            _blogs.AddRange(r.Value.ToList());
        }
        else
        {
            Console.WriteLine(r.Error);
            ToastService.ShowError(r.Error.Message);
        }
        _isLoading = false;

        await InvokeAsync(StateHasChanged);  
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("removeScrollListener");
    }
}

<script src="scroll.js"></script>
<script>
    async function  addVisibilityListener(dotNetHelper) {
        const blogList = document.querySelector('ul');
        if (!blogList) return;
       while (blogList.offsetHeight + 300 <= window.innerHeight) {
         if (blogList.offsetHeight ===0) {
               await new Promise(r => setTimeout(r, 500))
              continue;
            };
            console.log(blogList.offsetHeight)
            console.log(window.innerHeight)
        await dotNetHelper.invokeMethodAsync('LoadMoreBlogs');
       }
    }
    function isElementInViewport(el) {
        const rect = el.getBoundingClientRect();
        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)
        );
    }
</script>