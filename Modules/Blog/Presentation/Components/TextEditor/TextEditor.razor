@using HiHoHuBlog.Modules.Blog.Presentation.Components.TextEditor.Internal
@using HiHoHuBlog.Utils
@inject IJSRuntime JSRuntime
@inject IUploadProvider UploadProvider
@namespace HiHoHuBlog.Modules.Blog.Presentation.Components.TextEditor
<div @ref="@ToolBar">
    @if (Toolbar != null)
    {
        <CascadingValue Value="Toolbar">
            <CascadingValue Value="Fonts">
                <ToolbarContentComp></ToolbarContentComp>
            </CascadingValue>
        </CascadingValue>

    }

    @ToolbarContent
</div>
<div id="@EditorContainerId" @ref="@QuillElement">
    @EditorContent
</div>

@code {
    [Parameter]
    public Toolbar Toolbar { get; set; }
    [Parameter]
    public List<string> Fonts { get; set; }
    [Parameter]
    public string EditorContainerId { get; set; }
    [Parameter]
    public RenderFragment EditorContent { get; set; }

    [Parameter]
    public RenderFragment ToolbarContent { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }
        = false;

    [Parameter]
    public string Placeholder { get; set; }
        = "Compose an epic...";

    [Parameter]
    public string Theme { get; set; }
        = "snow";

    [Parameter]
    public string DebugLevel { get; set; }
        = "info";
    
    [Parameter]
    public Func<string, Task<string>> ImageUploadFunc { get; set; }

    private ElementReference QuillElement;
    private ElementReference ToolBar;
    private DotNetObjectReference<TextEditor> _dotNetRef;
    // New Parameter for content change event
    [Parameter]
    public EventCallback<string> OnChange { get; set; }

    protected override async Task
        OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await Interop.CreateQuill(
                JSRuntime,
                QuillElement,
                ToolBar,
                ReadOnly,
                Placeholder,
                Theme,
                DebugLevel,
                Fonts,
                _dotNetRef);
            // Bind the editor change event if OnChange is specified
            if (OnChange.HasDelegate)
            {
                await JSRuntime.InvokeVoidAsync("QuillFunctions.bindOnChangeEvent", QuillElement, _dotNetRef);
            }
        }
    }

    [JSInvokable]
    public async Task<string> OnUpload(string name,string type ,string array)
    {

        try
        {
            // Validate file type
            if (!type.StartsWith("image/"))
            {
                throw new Exception("Only image files are allowed");
            }

            // Remove data:image/...;base64, prefix if present
            var base64Data = array;
            if (base64Data.Contains(","))
            {
                base64Data = base64Data.Substring(base64Data.IndexOf(",") + 1);
            }

            // Convert base64 to bytes
            byte[] fileData = Convert.FromBase64String(base64Data);

            // Generate unique filename with original extension
            string extension = Path.GetExtension(name);
            string newFileName = $"{Guid.NewGuid()}{extension}";
            
            
            // Set up paths
            string uploadsFolder = Path.Combine("wwwroot", "uploads");
            Directory.CreateDirectory(uploadsFolder);
            string filePath = Path.Combine(uploadsFolder, newFileName);
            
            // Save the file
            await File.WriteAllBytesAsync(filePath, fileData);

            // await UploadProvider.UploadImage(fileData, newFileName);
            
            // Return the URL path
            return $"/uploads/{newFileName}";
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Upload error: {ex}");
            throw;
        }
    
    }
    
    [JSInvokable]
    public  async Task OnChangeHandler(string content)
    {
        // Console.WriteLine(123);
        
        await OnChange.InvokeAsync(content);
    }

    public async Task<string> GetText()
    {
        return await Interop.GetText(
            JSRuntime, QuillElement);
    }

    public async Task<string> GetHTML()
    {
        return await Interop.GetHTML(
            JSRuntime, QuillElement);
    }

    public async Task<string> GetContent()
    {
        return await Interop.GetContent(
            JSRuntime, QuillElement);
    }

    public async Task LoadContent(string Content)
    {
        var QuillDelta =
            await Interop.LoadQuillContent(
                JSRuntime, QuillElement, Content);
    }

    public async Task LoadHTMLContent(string quillHTMLContent)
    {
        var QuillDelta =
            await Interop.LoadQuillHTMLContent(
                JSRuntime, QuillElement, quillHTMLContent);
    }

    public async Task InsertImage(string ImageURL)
    {
        // If an ImageUploadFunc is provided, use it to upload the image before inserting it.
        Console.WriteLine(ImageURL);
        if (ImageUploadFunc != null)
        {
            Console.WriteLine("AfterCall");
            ImageURL = await ImageUploadFunc.Invoke(ImageURL);
            Console.WriteLine(ImageURL);
        }

        var QuillDelta = await Interop.InsertQuillImage(JSRuntime, QuillElement, null);
    }

    public async Task EnableEditor(bool mode)
    {
        var QuillDelta =
            await Interop.EnableQuillEditor(
                JSRuntime, QuillElement, mode);
    }
}