@page "/new-blog"
@using System.Reactive.Linq
@using System.Reactive.Subjects
@rendermode InteractiveServer
@using HiHoHuBlog.Components.Components
@using HiHoHuBlog.Modules.Blog.Entity
@using HiHoHuBlog.Modules.Blog.Presentation.Components.TextEditor
@using HiHoHuBlog.Modules.Blog.Service.Interface
@using HiHoHuBlog.Utils
@using Toolbar = HiHoHuBlog.Modules.Blog.Presentation.Components.TextEditor.Toolbar
@inject NavigationManager NavigationManager
@inject ICreateBlogService CreateBlogService
@inject IBlogUpdateService BlogUpdateService

<div class="h-screen ">
    <Container ContainerClass="pb-80">
        <div class="flex justify-between pt-10 ">
            <input @oninput="OnSearchQueryInput" placeholder="title" class="text-4xl w-full input focus:ring-0 border-transparent focus:border-transparent px-0 !outline-none"/>
        </div>
        @if (_firstChange)
        {
            <div class="py-2">
                @if (_isSaving)
                {
                    <div class="flex align-middle text-gray-500 space-x-2">
                        <span class="loading loading-spinner loading-md"></span>
                        <span class="">saving...</span>
                    </div>  
                }
                else
                {
                    <div class="flex align-middle text-gray-500 space-x-2">
                        <span class="">Saved</span>
                    </div>    
                }
            </div>    
        }
        <div class="h-full">
            <TextEditor  Toolbar="new Toolbar { ShowFullToolbar = true }" EditorContainerId="TestId" @ref="@TextEditor"
                         Placeholder="Write your own words...">
            </TextEditor>
        </div>
        
        
    </Container>
    <button @onclick="Onclick" class="btn btn-primary p-5">Click me </button>
    
</div>


@code {
    TextEditor TextEditor;

    private async void Onclick()
    {
        Console.WriteLine(await TextEditor.GetHTML());
    }
    private bool _isSaving = false;
    private readonly BlogCreate _blog = new BlogCreate();
   
    private IDisposable? _titleSubscription;
    private Subject<string?> titleSubject = new();
    private IDisposable? _contentSubscription;
    private Subject<string?> contentSubject = new();
    
    
    private IRequester _requester = new Requester();
    private bool _firstChange = false;

    private  void OnSearchQueryInput(ChangeEventArgs args)
    {
            _isSaving = true;

            var title = args.Value?.ToString();
            titleSubject.OnNext(title?.Trim());
            _isSaving = false;
    }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _titleSubscription = titleSubject
            .Throttle(TimeSpan.FromMilliseconds(300))
            .Subscribe(async title =>
            {
                await InvokeAsync(async () =>
                {
                    _isSaving = true;
                    StateHasChanged();
                    _blog.Title = title;
                    if (!_firstChange)
                    {
                        _firstChange = true;
                        await CreateBlogService.CreateNewBlog(_requester, _blog);
                    }
                    else
                    {
                        var r = await BlogUpdateService.UpdateTitle(_requester, _blog.Id, title);
                    }
                    _isSaving = false;
                    StateHasChanged();
                });
            });
    }
    
    
    
    public void Dispose()
    {
        _titleSubscription?.Dispose();
    }

    private async void Callback(ChangeEventArgs obj)
    {
        Console.WriteLine(await TextEditor.GetHTML());
    }

}