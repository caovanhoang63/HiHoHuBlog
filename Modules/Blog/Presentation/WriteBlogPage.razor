@page "/new-blog"
@page "/p/{BlogId}/edit"
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Security.Claims
@inject IUploadProvider UploadProvider
@rendermode InteractiveServer
@using HiHoHuBlog.Components.Components
@using HiHoHuBlog.Modules.Blog.Entity
@using HiHoHuBlog.Modules.Blog.Presentation.Components.TextEditor
@using HiHoHuBlog.Modules.Blog.Service.Interface
@using HiHoHuBlog.Modules.User.Entity
@using HiHoHuBlog.Utils
@using Toolbar = HiHoHuBlog.Modules.Blog.Presentation.Components.TextEditor.Toolbar
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging.Console
@inject NavigationManager NavigationManager
@inject ICreateBlogService CreateBlogService
@inject IBlogUpdateService BlogUpdateService
@inject IBlogGetService BlogGetService
@inject IToastService ToastService


@attribute [Authorize]
<AuthorizeView Roles="admin, user, mod">
    <Authorized>
        <div class="h-screen ">
            <Container ContainerClass="pb-80">
                <FullScreenSpinner IsLoading="_isLoading"></FullScreenSpinner>
                <!-- You can open the modal using ID.showModal() method -->
                <dialog id="publish_modal" class="modal">
                    <div class="w-full max-w-full h-full max-h-full bg-white flex justify-center items-center " >
                        <div class="modal-box bg-transparent max-w-5xl h-full p-10">
                            <div class="flex">
                                <div class="flex flex-col w-1/2 space-y-2 p-4">
                                    <h3 class="text-lg font-bold pt-4">Story Preview</h3>
                                    <div class="bg-gray-100 h-52 flex items-center text-center">
                                        <p class="text-base font-medium mx-12 text-gray-500">Include a high-quality 
                                            image in your story to make it more inviting to readers.</p>
                                    </div>
                                    <input value="@_blog.Title" type="text" placeholder="Tag name" 
                                           class="input w-full focus:ring-0 border-transparent 
                                                    focus:border-transparent px-0 !outline-none"/>
                                    <div class="divider !-mt-2"></div>
                                    <p class="text-base font-medium text-gray-500">Changes here will affect how your 
                                        story appears in public places like HiHoHu’s 
                                        homepage and in subscribers’ inboxes — not the contents of the story itself.</p>
                                </div>
                                <div class="flex flex-col w-1/2 p-4 space-y-5">
                                    <h3 class="text-lg font-bold pt-4">Publishing to: @_requester.GetUsername()</h3>
                                    <h3 class="text-sm font-medium">Add or change topics (up to 5) 
                                        so readers know what your story is about</h3>
                                    <input  type="text" placeholder="Add a topic..."
                                           class="input input-bordered w-full"/>
                                </div>
                            </div>
                            <div class="modal-action">
                                <button @onclick="OnPublish" class="btn btn-success text-white rounded-full">Publish now</button>
                                <form method="dialog">
                                    <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                                    <!-- if there is a button, it will close the modal -->
                                    <button class="btn rounded-full">Close</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </dialog>
                <div class="flex flex-row-reverse pt-2">
                    <button onclick="publish_modal.showModal()" class="btn btn-success @(_blog.Id == 0 ? "btn-disabled" : " ") text-base-200 btn-sm ">Publish</button>
                </div>
                <div class="flex justify-between pt-5 ">
                    <input value="@_blog.Title" @oninput="OnSearchQueryInput" placeholder="title" class="text-4xl w-full input focus:ring-0 border-transparent focus:border-transparent px-0 !outline-none"/>
                </div>
                @if (_firstChange)
                {
                    <div class="py-2">
                        @if (_isSaving)
                        {
                            <div class="flex align-middle text-gray-500 space-x-2">
                                <span class="loading loading-spinner loading-md"></span>
                                <span class="">saving...</span>
                            </div>
                        }
                        else
                        {
                            <div class="flex align-middle text-gray-500 space-x-2">
                                <span class="">Saved</span>
                            </div>
                        }
                    </div>
                }
                <div class="h-full">
                    <TextEditor ImageUploadFunc="OnUpload" OnChange="OnChange" Toolbar="new Toolbar { ShowFullToolbar = true }" EditorContainerId="TestId"
                                Placeholder="Write your own words..." @ref="_textEditor">
                    </TextEditor>
                </div>


            </Container>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter] 
    Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter] public string? BlogId { get; set; }

    TextEditor? _textEditor;
    
    private bool _isLoading = false;
    private IDisposable? _titleSubscription;
    private IDisposable? _contentSubscription;
    private readonly Subject<string?> _titleSubject = new();
    private readonly Subject<string?> _contentSubject = new();
    private bool _isSaving = false;
    private bool _firstChange = false;
    private  void OnChange(string args)
    {
        _isSaving = true;
        var content = args;
        _contentSubject.OnNext(content);
        _isSaving = false;
    }
    
    private async Task<Result<string, Err>> OnUpload(string name, string type, string array)
    {
         
        // Validate file type
        if (!type.StartsWith("image/"))
        {
            return Result<string, Err>.Err(new Err("Only image files are allowed"));
        }

        // Remove data:image/...;base64, prefix if present
        var base64Data = array;
        if (base64Data.Contains(","))
        {
            base64Data = base64Data.Substring(base64Data.IndexOf(",") + 1);
        }

        // Convert base64 to bytes
        byte[] fileData = Convert.FromBase64String(base64Data);

        // Generate unique filename with original extension
        string extension = Path.GetExtension(name);
        string newFileName = $"{Guid.NewGuid()}{extension}";
        
        var uR = await UploadProvider.UploadImage(fileData, newFileName);
        if (!uR.IsOk)
        {
            return Result<string, Err>.Err(uR.Error);
        }
        return Result<string,Err>.Ok(uR.Value.Url);
    } 
    private readonly BlogCreate _blog = new BlogCreate();
    private IRequester _requester;
    
    private  void OnSearchQueryInput(ChangeEventArgs args)
    {
            _isSaving = true;
            var title = args.Value?.ToString();
            _titleSubject.OnNext(title?.Trim());
            _isSaving = false;
    }

    protected override async Task OnInitializedAsync()
    {
        _requester = await AuthUtils.GetInfo(authenticationStateTask); 

    }
    
    protected  override async Task OnParametersSetAsync()
    {
        if (BlogId is not null)
        {
            _isLoading = true;
            _firstChange = true;
            if (!Int32.TryParse(BlogId, out var id))
            {
                NavigationManager.NavigateTo("/error");
                return;
            }
            var r =  await BlogGetService.GetBlog(_requester,id);
            if (!r.IsOk || r.Value is null || r.Value.UserId != _requester.GetId() )
            {
                NavigationManager.NavigateTo("/error");
                return;
            }
            
            _blog.Id = r.Value.Id;
            _blog.Title = r.Value.Title;
            _blog.UserId = r.Value.UserId;
            _blog.Content = r.Value.Content;
            if (_textEditor is null)
            {
                NavigationManager.NavigateTo("error");
                return;
            }
            await _textEditor.LoadHTMLContent(_blog.Content);
            _isLoading = false;
            StateHasChanged();
        }
        _contentSubscription = _contentSubject
            .Throttle(TimeSpan.FromMilliseconds(1500))
            .Subscribe(async content =>
            {
                await InvokeAsync(async () =>
                {
                    _isSaving = true;
                    StateHasChanged();
                    _blog.Content = content;
                    if (!_firstChange)
                    {
                        _firstChange = true;
                        await CreateBlogService.CreateNewBlog(_requester, _blog);
                        ChangeUrl($"p/{_blog.Id.ToString()}/edit");
                    }
                    else
                    {
                        var r = await BlogUpdateService.UpdateContent(_requester, _blog.Id, content);
                    }
                    _isSaving = false;
                    StateHasChanged();
                });
            });
        
            _titleSubscription = _titleSubject
            .Throttle(TimeSpan.FromMilliseconds(300))
            .Subscribe(async title =>
            {
                await InvokeAsync(async () =>
                {
                    _isSaving = true;
                    StateHasChanged();
                    _blog.Title = title;
                    if (!_firstChange)
                    {
                        _firstChange = true;
                        await CreateBlogService.CreateNewBlog(_requester, _blog);
                        ChangeUrl($"p/{_blog.Id.ToString()}/edit");
                    }
                    else
                    {
                        var r = await BlogUpdateService.UpdateTitle(_requester, _blog.Id, title);
                    }
                    _isSaving = false;
                    StateHasChanged();
                });

            });
    }

    private async void OnPublish()
    {
        var r = await BlogUpdateService.Publish(_requester, _blog.Id, _blog.Content);
        if (!r.IsOk)
        {
            ToastService.ShowError(r.Error.Message);
            return;
        }
        ToastService.ShowSuccess("Publish success!");
    }
    
    public void Dispose()
    {
        _titleSubscription?.Dispose();
        _contentSubscription?.Dispose();
    }
    void ChangeUrl(string url){
        // You can also change it to any url you want
        JSRuntime.InvokeVoidAsync("ChangeUrl", url);
    }
    
}

<script>
    function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.close();
        }
    }
    function openModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.showModal();
        }
    }
</script>