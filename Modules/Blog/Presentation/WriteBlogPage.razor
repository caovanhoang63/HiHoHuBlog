@page "/new-blog"
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Security.Claims
@using WYSIWYGTextEditor
@rendermode InteractiveServer
@using HiHoHuBlog.Components.Components
@using HiHoHuBlog.Modules.Blog.Entity
@using HiHoHuBlog.Modules.Blog.Service.Interface
@using HiHoHuBlog.Modules.User.Entity
@using HiHoHuBlog.Utils
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging.Console
@inject NavigationManager NavigationManager
@inject ICreateBlogService CreateBlogService
@inject IBlogUpdateService BlogUpdateService

@attribute [Authorize]
<AuthorizeView Roles="admin, user">
    <Authorized>
    <div class="h-screen ">
        <Container ContainerClass="pb-80">
            <div class="flex justify-between pt-10 ">
                <input @oninput="OnSearchQueryInput" placeholder="title" class="text-4xl w-full input focus:ring-0 border-transparent focus:border-transparent px-0 !outline-none"/>
            </div>
            @if (_firstChange)
            {
                <div class="py-2">
                    @if (_isSaving)
                    {
                        <div class="flex align-middle text-gray-500 space-x-2">
                            <span class="loading loading-spinner loading-md"></span>
                            <span class="">saving...</span>
                        </div>  
                    }
                    else
                    {
                        <div class="flex align-middle text-gray-500 space-x-2">
                            <span class="">Saved</span>
                        </div>    
                    }
                </div>    
            }
            <div class="h-full">
                <TextEditor  Toolbar="new Toolbar { ShowFullToolbar = true }" EditorContainerId="TestId" @ref="@TextEditor"
                             Placeholder="Enter non HTML format like centering...">
                </TextEditor>
            </div>
        </Container>
    </div>
    </Authorized>
</AuthorizeView>


@code {
    TextEditor TextEditor;
    [CascadingParameter] 
    Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool _isSaving = false;
    private readonly BlogCreate _blog = new BlogCreate();
   
    private IDisposable? _titleSubscription;
    private Subject<string?> titleSubject = new();
    private IDisposable? _contentSubscription;
    private Subject<string?> contentSubject = new();
    
    private IRequester _requester;
    private bool _firstChange = false;
    
    private  void OnSearchQueryInput(ChangeEventArgs args)
    {
            _isSaving = true;

            var title = args.Value?.ToString();
            titleSubject.OnNext(title?.Trim());
            _isSaving = false;
    }

    protected override async Task OnInitializedAsync()
    {
        _requester = await AuthUtils.GetInfo(authenticationStateTask); 
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _titleSubscription = titleSubject
            .Throttle(TimeSpan.FromMilliseconds(300))
            .Subscribe(async title =>
            {
                await InvokeAsync(async () =>
                {
                    _isSaving = true;
                    StateHasChanged();
                    _blog.Title = title;
                    if (!_firstChange)
                    {
                        _firstChange = true;
                        await CreateBlogService.CreateNewBlog(_requester, _blog);
                    }
                    else
                    {
                        var r = await BlogUpdateService.UpdateTitle(_requester, _blog.Id, title);
                    }
                    _isSaving = false;
                    StateHasChanged();
                });

            });
    }
    
    
    
    public void Dispose()
    {
        _titleSubscription?.Dispose();
    }

    private async void Callback(ChangeEventArgs obj)
    {
        Console.WriteLine(await TextEditor.GetHTML());
    }

}