@page "/blog/{Slug}"
@using HiHoHuBlog.Components.Components
@using HiHoHuBlog.Modules.Blog.Entity
@using HiHoHuBlog.Modules.Blog.Presentation.Components
@using HiHoHuBlog.Modules.Blog.Presentation.Components.TextEditor
@using HiHoHuBlog.Modules.Blog.Service.Interface
@using HiHoHuBlog.Modules.Search.Entity
@using HiHoHuBlog.Modules.Search.Service.Interface
@using HiHoHuBlog.Modules.User.Service.Interface
@using HiHoHuBlog.Utils
@using HiHoHuBlog.Modules.Admin.Presentation.Components
@rendermode InteractiveServer
@inject IBlogGetService BlogGetService
@inject NavigationManager NavigationManager
@inject ISearchBlogService SearchBlogService
@inject IUserBlogActionService UserBlogAction 
@inject IToastService ToastService
@inject IBlogUpdateService BlogUpdateService
@inject IUserFollowService UserFollowService
@attribute [Authorize]
@attribute [AllowAnonymous]
<Container>
    <ConfirmModal Open="OpenUnfollowModal" Title="Unfollow"
                  Message="@_unfollowMessage" OnConfirm="OnConfirmUnFollow" OnDeny="OnDenyUnFollow">
    </ConfirmModal>
    <CommentSection IsOpen="_isOpen" comments="_comments" OnClose='() => _isOpen = false' Blog="_blog" Requester="_requester"></CommentSection>
    <FullScreenSpinner IsLoading="_isLoading"></FullScreenSpinner>
    <div class="container mx-auto px-4 py-8">
        <!-- Header Section -->
        <div class="mb-8">
            <h1 class="text-4xl font-bold mb-4">@_blog?.Title</h1>
            <div class="flex items-center gap-4 mb-4">
                <div class="avatar" @onclick='() => NavigationManager.NavigateTo($"/profile/{_blog?.User?.UserName}")'>
                    <div class="h-11 rounded-full">
                        <img src="@(_blog?.User?.Avatar?.Url is null ? "https://placehold.co/600x400?text=Hihohublog" : _blog?.User?.Avatar?.Url)"/>
                    </div>
                </div>
                <div>
                    <div class="flex items-center gap-2">
                        <span class="font-medium hover:underline"
                              @onclick='() => NavigationManager.NavigateTo($"/profile/{_blog?.User?.UserName}")'>@_blog?.User?.FirstName @_blog?.User?.LastName</span>
                        @*<button class="btn btn-sm btn-outline btn-primary  @(_isFollowed? "bg-amber-300":   "") " @onclick="onFollowClick">Follow</button>*@
                        @if(_requester?.GetId() !=_blog?.User?.Id)
                        {
                            <FollowButton IsFollow="_isFollowed" OnFollowClick="OnFollowClick"></FollowButton>
                        }
                        </div>
                    <div class="text-sm text-gray-600">
                        <span>@_blog?.MinToRead min read</span>
                        <span class="mx-2">·</span>
                        <span>@_blog?.CreatedAt</span>
                    </div>
                </div>
            </div>
            <div class="divider m-0"></div>
            <div class="flex items-center gap-4">
                <div class="flex items-center gap-2">
                    <button class="btn btn-circle btn-ghost" @onclick="OnLikeClick">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 " fill="@(_isLiked ? "red" : "none")" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
                        </svg>
                    </button>
                    <span>@_blog?.TotalLike</span>
                </div>
                <div class="flex items-center gap-2">
                    <button class="btn btn-circle btn-ghost" @onclick="OnOpenComment">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                        </svg>
                    </button>
                    <span>@_blog?.TotalComment</span>
                </div>

                @*<div class="flex-grow"></div>
                <button class="btn btn-circle btn-ghost">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z"/>
                    </svg>
                </button>
                <button class="btn btn-circle btn-ghost">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"/>
                    </svg>
                </button>*@
            </div>
            <div class="divider m-0"></div>

        </div>

        @* Content *@
        <div>

            @if (_blog is not null)
            {
                <TextEditor @key="_blog.Id" @ref="_textEditor" ReadOnly="true">
                    <EditorContent>
                        @((@MarkupString)_blog.Content)
                    </EditorContent>
                </TextEditor>
            }
        </div>
        <div class="divider m-0 "></div>
        <div class="container mx-auto px-4 py-8">
            <!-- Header -->
            <header class="flex items-center justify-between mb-8">
                <div class="flex items-center gap-4 mb-4">
                    <div class="avatar">
                        <div class="h-11 rounded-full">
                            <img src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp"/>
                        </div>
                    </div>
                    <div>
                        <div class="flex items-center gap-2">
                            <span class="font-bold text-2xl">Written by @_blog?.User?.FirstName @_blog?.User?.LastName</span>
                        </div>
                        <div class="text-sm text-gray-600">
                            <span>@_blog?.TotalFollowers Followers</span>
                            <span class="mx-2">·</span>
                            <span>@_blog?.TotalFollowing Following</span>
                        </div>
                    </div>
                </div>
                @if(_requester?.GetId() !=_blog?.User?.Id)
                {
                    <FollowButton IsFollow="_isFollowed" OnFollowClick="OnFollowClick"></FollowButton>
                }            
                </header>
            @* More From this Author Section *@
            <span class="font-bold text-2xl">More from @_blog?.User?.FirstName @_blog?.User?.LastName</span>
            <!-- Articles -->
            <div class="grid grid-cols-2 mt-8 gap-8">
                @foreach (var blog in _authorBlogs)
                {
                    <BlogRelatedCard Blog="blog"/>
                }
            </div>
           
            
            @*Recommended from Medium Section*@
            <div class="divider mt-24 mb-20 w-screen relative left-1/2 -translate-x-1/2 m-0"></div>
            <span class="font-bold text-2xl">Recommended from Medium</span>
            <!-- Articles -->
            <div class="grid grid-cols-2 mt-8 gap-8">
                @foreach (var blog in _relatedBlog)
                {
                    <BlogRelatedCard Blog="blog"/>
                }
            </div>
        </div>
    </div>
</Container>

@code {
    [Parameter]
    public string Slug { get; set; }
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }
    private TextEditor? _textEditor;
    private bool _isLoading = true;
    private IEnumerable<BlogSearchDoc> _relatedBlog = new List<BlogSearchDoc>();
    private IEnumerable<BlogSearchDoc> _authorBlogs = new List<BlogSearchDoc>();
    private readonly Paging _relatedPaging = new Paging(1, 4);
    private readonly Paging _authorPaging = new Paging(1, 4);
    private IRequester? _requester;
    private BlogDetail _blog { get; set; }
    private int? _totalLikes = 0;
    private bool _isOpen = false;
    private bool _isLiked = false;
    private bool _isFollowed = false;
    private string _unfollowMessage = "";
    public bool OpenUnfollowModal { get; set; } = false;


    private List<UserCommentBlog> _comments = new List<UserCommentBlog>();
    
    
    private async Task OnOpenComment()
    {
        _isOpen = !_isOpen;
        var result = await BlogUpdateService.GetCommentsById(_blog.Id);
        if (result.IsOk)
        {
            if (result.Value != null)
            {
                 var comments = result.Value.ToList();
                _comments = comments;
            }
                
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        _requester = await AuthUtils.GetInfo(authenticationStateTask);

    }

    protected override async Task OnParametersSetAsync()
    {
        var request = Slug.Split('-'); 
        string idString = request[^1];
        _isLoading = true;
        int id;
        if (!Int32.TryParse(idString, out id))
        {
            return;
        }
        var r = await BlogGetService.GetBlog(null,id);
        if (!r.IsOk || r.Value is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }
        
        if (Slug != r.Value.Slug)
        {
            ChangeUrl($"blog/{r.Value.Slug}");
        }

        _blog = r.Value;
        _isLoading = false;
        await InvokeAsync(StateHasChanged);
        
        var relatedBlog = await SearchBlogService.RecommendSearchBlogByBlog(null, _blog.Id, _relatedPaging);

        if (relatedBlog.IsOk)
        {
            _relatedBlog = relatedBlog.Value;
        }

        var authorBlog = await SearchBlogService.RecommendSearchBlogOfUser(_blog.UserId, _authorPaging);

        if (authorBlog.IsOk)
        {
            _authorBlogs = authorBlog.Value;
        }
        
        await InvokeAsync(StateHasChanged);
        
        

        if (_requester != null)
        { 
            var readBlogR =  await UserBlogAction.ReadBlog(_requester, _blog.Id);
            var totalLikes = await BlogUpdateService.GetTotalLikes(_blog.Id);
            if (totalLikes.IsOk)
            {
                _totalLikes = totalLikes.Value;
            }

            if (_blog.User != null)
            {
                var isFollowed = await UserFollowService.IsFollowed(_requester.GetId(), _blog.User.Id);
                if (isFollowed.IsOk)
                {
                    _isFollowed = isFollowed.Value;
                }
            }


            var isLiked = await BlogUpdateService.IsLiked(_requester.GetId(), _blog.Id);
            if (!isLiked.IsOk)
            {
                Console.WriteLine(isLiked.Error);
            }
            _isLiked = isLiked.Value;
        }
    }

    
    private async Task OnFollowClick()
    {
        if (_requester is not null)
        {
            if (!_isFollowed)
            {
                var r = await UserFollowService.Follows(_requester.GetId(), _blog.User!.Id);
                if (!r.IsOk)
                {
                    Console.WriteLine(r.Error);
                    ToastService.ShowError(r.Error.Message);
                }
                _isFollowed = !_isFollowed;
            }
            else
            {
                OpenUnfollowModal = true;
                _unfollowMessage = $"Are you sure you want to unfollow {_blog.User?.FirstName} {_blog.User?.LastName}?";
                
            }
        }
        else
        {
            NavigationManager.NavigateTo($"/login?ReturnUrl=%2Fblog/{Slug}");
            
        }
       
        StateHasChanged();
    }
    
    private async Task OnLikeClick()
    {
        if (_requester is not null)
        {
            if (!_isLiked)
            {
                var r =  await BlogUpdateService.LikeBlog(_requester.GetId(), _blog.Id);
                if (!r.IsOk)
                {
                    Console.WriteLine(r.Error);
                    ToastService.ShowError(r.Error.Message);
                }
                _isLiked = !_isLiked;
                _totalLikes++;
            }
            else
            {
                var r = await BlogUpdateService.DisikeBlog(_requester.GetId(), _blog.Id);
                if (!r.IsOk)
                {
                    Console.WriteLine(r.Error);
                    ToastService.ShowError(r.Error.Message);
                }
                _isLiked = !_isLiked;
                _totalLikes--;
            }
        }
        else
        {
            NavigationManager.NavigateTo($"/login?ReturnUrl=%2Fblog/{Slug}");
        }
       
        StateHasChanged();
    }
    private async void OnConfirmUnFollow()
    {
        _isLoading = true;
        var r = await UserFollowService.UnFollow(_requester.GetId(), _blog.User!.Id);
        if (!r.IsOk)
        {
            ToastService.ShowError(r.Error.Message);
            Console.WriteLine(r.Error);
        }

        _isLoading = false;
        OpenUnfollowModal = false;
        _isFollowed = false;
       await InvokeAsync(StateHasChanged);
    }
    private void OnDenyUnFollow()
    {
        OpenUnfollowModal= false;
    }
    
    void ChangeUrl(string url){
        JSRuntime.InvokeVoidAsync("ChangeUrl", url);
    }
    
}