@page "/search"
@using HiHoHuBlog.Components.Components
@using HiHoHuBlog.Modules.Blog.Presentation.Components
@using HiHoHuBlog.Modules.Search.Entity
@using HiHoHuBlog.Modules.Search.Presentation.Components
@using HiHoHuBlog.Modules.Search.Service.Interface
@using HiHoHuBlog.Utils
@inject ISearchBlogService SearchBlogService
@inject NavigationManager NavigationManager
@inject ISearchTagService SearchTagService
@inject ISearchUserService SearchUserService

@attribute [Authorize]
@attribute [AllowAnonymous]

<Container ContainerClass="flex justify-between space-x-10 max-w-7xl">
    <div class="grow max-w-4xl py-10">
        <div class="text-3xl font-bold ">
            <span class="text-gray-400">Result for </span>
            <span>@SearchTerm</span>
        </div>
        @*<span class="text-2xl font-bold">Results for asdasd</span>*@
        <div role="tablist" class="tabs mt-10 tabs-bordered">
            <input type="radio" name="my_tabs_1" role="tab" class="tab" aria-label="Blogs" checked="@isActiveTab(0)"
                   @onchange="@(() => ChangeTab(0,"blogs"))"/>
            <div role="tabpanel" class="tab-content">
                @if (_searchDocs is not null)
                {
                    foreach (var blog in _searchDocs)
                    {
                        <BlogCard BlogSearchDoc="@blog"/>
                    }
                }
                @* Paging *@
                <div class="join mt-5 flex justify-center">
                    <button @onclick="OnPrevious" class="join-item btn btn-ghost btn-sm" disabled="@(Paging.Page == 1)">«</button>

                    @for (int i = 1; i <= Paging.TotalPages; i++)
                    {
                    if (ShouldDisplayPage(i))
                    {
                    var i1 = i;
                    <button @onclick="() => OnPageClick(i1)"
                            class="join-item btn btn-sm @(Paging.Page == i ? "btn-active" : "btn-ghost")">
                        @i
                    </button>
                    }
                    else if (i == 2 || i == Paging.TotalPages - 1)
                    {
                    <button class="join-item btn btn-ghost btn-sm btn-disabled">...</button>
                    }
                    }

                    <button @onclick="OnNext" class="join-item btn btn-ghost btn-sm" disabled="@(Paging.Page == Paging.TotalPages)">»</button>
                </div>
            </div>
           
            <input
                type="radio"
                name="my_tabs_1"
                role="tab"
                class="tab"
                aria-label="People"
                checked="@isActiveTab(1)"
                @onchange="@(() => ChangeTab(1,"people"))"/>
            <div role="tabpanel" class="tab-content">
                @if (_searchUser is not null)
                {
                    @foreach (var user in _searchUser)
                    {
                        <MatchingPeopleCard User="user"/>
                    }    
                }
            </div>

            <input type="radio" name="my_tabs_1" role="tab" class="tab" aria-label="Topics" checked="@isActiveTab(2)"
                   @onchange="@(() => ChangeTab(2,"topics"))"/>
            <div role="tabpanel" class="tab-content mt-10">
                <div class="flex flex-wrap gap-2">
                    @if(_searchTag is not null)
                    {
                        foreach (var tag in _searchTag)
                        {
                            <div class="bg-gray-200 rounded-full px-4 py-2 mr-2 mb-2 cursor-pointer">@tag.Name</div>
                        }
                    }
                </div>
            </div>
        </div>

    </div>
    <div class="border-l-[1px] grow p-10 max-w-sm">
        <div class="flex flex-col space-y-2">
            <span class="text-gray-600 mb-6">Topics matching @SearchTerm</span>
            <div class="flex flex-wrap ">
                @if(_searchTagMatching is not null)
                {
                    foreach (var tagMatching in _searchTagMatching)
                    {
                        <div class="bg-gray-200 rounded-full px-4 py-2 mr-2 mb-2 cursor-pointer">@tagMatching.Name</div>
                    }
                }
            </div>
            <div class="divider mt-9 mb-0"></div>
            @if(_searchUser is not null)
            {
                <span class="text-gray-600 mb-6">Topics matching @SearchTerm</span>
                <div >
                        @foreach (var user in _searchUser)
                        {
                            <MatchingPeopleSmallCard User="user"/>
                        }    
                    @*<MatchingPeopleSmallCard ></MatchingPeopleSmallCard>
                <MatchingPeopleSmallCard></MatchingPeopleSmallCard>*@
                </div>
            }
            

        </div>
    </div>
</Container>


@code {
    [SupplyParameterFromQuery(Name = "q")] string? SearchTerm { get; set; }
    [SupplyParameterFromQuery(Name = "type")] string? Type { get; set; }
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }
    private IRequester? _requester;
    
    
    private int activeTab = 0;
    private Paging Paging = new Paging(1, 3);
    private Paging PagingTopic = new Paging(1, 10);
    private Paging PagingTopicMatching = new Paging(1, 4);

    private IEnumerable<BlogSearchDoc>? _searchDocs = new List<BlogSearchDoc>();
    private IEnumerable<TagSearchDoc>? _searchTag = new List<TagSearchDoc>();
    private IEnumerable<TagSearchDoc>? _searchTagMatching = new List<TagSearchDoc>();
    private IEnumerable<UserSearchDoc>? _searchUser;
    
    private async Task GetSearchTags()
    {
        var result = await SearchTagService.SearchTags(SearchTerm, PagingTopic);
        if (result.IsOk)
        {
            var totalResult = result.Value.Count();
            _searchTag = result.Value;
            
        }
        else
        {
            _searchTag = new List<TagSearchDoc>();
        }
        
        var searchTagMatching = await SearchTagService.SearchTags(SearchTerm, PagingTopicMatching);
        if (searchTagMatching.IsOk)
        {
            _searchTagMatching = searchTagMatching.Value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _requester = await AuthUtils.GetInfo(authenticationStateTask);

    }

    // Chuyển từ OnInitializedAsync sang OnParametersSetAsync
    protected override async Task OnParametersSetAsync()
    {
        await GetBlogs();
        await GetSearchTags();
        await GetUsers();
    }
    private bool ShouldDisplayPage(int page)
    {
        // Hiển thị trang đầu, cuối, trang hiện tại, và các trang xung quanh
        return page == 1 || page == Paging.TotalPages || 
               Math.Abs(page - Paging.Page) <= 2;
    }

    private async void OnPageClick(int page)
    {
        if (page != Paging.Page)
        {
            Paging.Page = page;
            await GetBlogs();
        }
        StateHasChanged();

    }

    private async void OnPrevious()
    {
        if (Paging.Page > 1)
        {
            Paging.Page--;
            await GetBlogs();
        }
    }

    private async void OnNext()
    {
        if (Paging.Page < Paging.TotalPages)
        {
            Paging.Page++;
            await GetBlogs();
        }
    }
    
    private async Task GetUsers()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            SearchTerm = "";
        }
        if (!string.IsNullOrEmpty(Type))
        {
            activeTab = Type switch
            {
                "blogs" => 0,
                "people" => 1,
                "topics" => 2,
                _ => 0
            };
        }
        
        var result = await SearchUserService.SearchUsers(_requester,SearchTerm, Paging);
        if (result.IsOk)
        {
            _searchUser = result.Value;
            foreach (var r in _searchUser)
            {
                Console.WriteLine(r.FirstName);
            }

        }
    }
    
    private async Task GetBlogs()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            SearchTerm = "";
        }
        // Cập nhật tab dựa trên query string "tab"
        if (!string.IsNullOrEmpty(Type))
        {
            activeTab = Type switch
            {
                "blogs" => 0,
                "people" => 1,
                "topics" => 2,
                _ => 0
            };
        }
        // Gọi API tìm kiếm
        var result = await SearchBlogService.SearchBlog(SearchTerm, Paging);
        if (result.IsOk)
        {


            var totalResult = result.Value.Count();
            _searchDocs = result.Value;
        }
        else
        {
            _searchDocs = new List<BlogSearchDoc>();
        }
    }

    private void ChangeTab(int tabIndex, string tabName)
    {
        activeTab = tabIndex;
        NavigationManager.NavigateTo($"/search?q={SearchTerm}&type={tabName}", forceLoad: false);
    }

    private bool isActiveTab(int tabIndex)
    {
        return activeTab == tabIndex;
    }
    
}